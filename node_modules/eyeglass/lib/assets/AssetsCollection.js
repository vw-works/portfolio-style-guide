"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var AssetsSource_1 = require("./AssetsSource");
var stringUtils = require("../util/strings");
var URI_1 = require("../util/URI");
var AssetsCollection = /** @class */ (function () {
    function AssetsCollection(options) {
        this.options = options;
        this.sass = options.eyeglass.engines.sass;
        this.sources = [];
    }
    /**
      * adds an AssetsSource to the collection
      * @param    {String} src - the source directory of the assets
      * @param    {Object} opts - the options to pass @see AssetsSource
      * @returns  {AssetsCollection} returns the instance of AssetsCollection for chaining
      */
    AssetsCollection.prototype.addSource = function (src, opts) {
        this.sources.push(new AssetsSource_1.default(src, opts));
        return this;
    };
    /**
      * returns the scss to register all the assets
      * @param    {String} name - the namespace to use
      * @returns  {String} the scss representation of the asset registration
      */
    AssetsCollection.prototype.asAssetImport = function (name) {
        var e_1, _a, e_2, _b;
        // builds the scss to register all the assets
        // this will look something like...
        //  @import "eyeglass/assets";
        //  @include asset-register-all("namespace",
        //    "path/to/foo.png": (
        //      filepath: "/absolute/namespace/path/to/foo.png",
        //      uri: "namespace/path/to/foo.png"
        //    ),
        //  );
        var contents = [
            '@import "eyeglass/assets";',
        ];
        try {
            for (var _c = __values(this.sources), _d = _c.next(); !_d.done; _d = _c.next()) {
                var source = _d.value;
                // get the assets for the entry
                var assets = source.getAssets(name);
                var namespace = (stringUtils.quoteJS(this.sass, assets.namespace) || "null");
                contents.push("@include asset-register-all(" + namespace + ", (");
                try {
                    for (var _e = __values(assets.files), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var asset = _f.value;
                        var url = URI_1.URI.sass(this.sass, asset.name);
                        var uri = URI_1.URI.sass(this.sass, asset.uri);
                        var filepath = URI_1.URI.sass(this.sass, asset.sourcePath);
                        contents.push("  " + url + ": (filepath: " + filepath + ", uri: " + uri + "),");
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                contents.push("));");
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return contents.join("\n");
    };
    /**
      * Build a string suitable for caching an instance of this
      * @returns {String} the cache key
      */
    AssetsCollection.prototype.cacheKey = function (name) {
        return this.sources.map(function (source) {
            return source.cacheKey(name);
        }).sort().join("\x00");
    };
    return AssetsCollection;
}());
exports.default = AssetsCollection;
//# sourceMappingURL=AssetsCollection.js.map