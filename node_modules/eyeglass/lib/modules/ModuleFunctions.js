"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sync_1 = require("../util/sync");
var debug = require("../util/debug");
var merge = require("lodash.merge");
var heimdall = require("heimdalljs");
var TIME_FN_CALLS = !!(process.env.EYEGLASS_PERF_DEBUGGING);
var ARGUMENTS_REGEX = /\s*\(.*\)$/;
var DELIM = "\n\t\u2022 ";
function getFunctionName(fnSignature) {
    return fnSignature.replace(ARGUMENTS_REGEX, "");
}
function checkConflicts(obj1, obj2) {
    // return early if either collection is empty
    if (!obj1 || !obj2) {
        return;
    }
    var functions = {};
    // collect all the function names and signatures from the first collection
    Object.keys(obj1).forEach(function (fn) {
        var fnName = getFunctionName(fn);
        functions[fnName] = fn;
    });
    // check all the function names and signatures from the second collection
    Object.keys(obj2).forEach(function (fn) {
        var fnName = getFunctionName(fn);
        var currentFunction = functions[fnName];
        // if the current signature does not match the new signature...
        if (currentFunction && currentFunction !== fn) {
            // throw a warning
            // eslint-disable-next-line no-console
            console.warn("WARNING: Function " + fnName +
                " was redeclared with conflicting function signatures: " +
                currentFunction + " vs. " + fn);
        }
    });
}
function ModuleFunctions(eyeglass, _sass, _options, existingFunctions) {
    var functions = eyeglass.modules.list.reduce(function (fns, mod) {
        if (!mod.functions) {
            return fns;
        }
        // log any functions found in this module
        /* istanbul ignore next - don't test debug */
        debug.functions && debug.functions("functions discovered in module %s:%s%s", mod.name, DELIM, Object.keys(mod.functions).join(DELIM));
        checkConflicts(fns, mod.functions);
        return merge(fns, mod.functions);
    }, {});
    checkConflicts(functions, existingFunctions);
    functions = merge(functions, existingFunctions);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    functions = sync_1.default.all(functions);
    // log all the functions we discovered
    /* istanbul ignore next - don't test debug */
    debug.functions && debug.functions("all discovered functions:%s%s", DELIM, Object.keys(functions).join(DELIM));
    return instrumentFunctionCalls(functions);
}
exports.default = ModuleFunctions;
var SassFnSchema = /** @class */ (function () {
    function SassFnSchema() {
    }
    return SassFnSchema;
}());
/**
 * nanosecond precision timers.
 */
function timeNS() {
    return process.hrtime();
}
/**
 * nanosecond precision timer difference.
 */
function timeSinceNS(time) {
    var result = process.hrtime(time);
    return result[0] * 1e9 + result[1];
}
/**
 * This function conditionally instruments all function calls
 * with a heimdall monitor.
 */
function instrumentFunctionCalls(functions) {
    var e_1, _a;
    if (!TIME_FN_CALLS)
        return functions;
    if (!heimdall.hasMonitor('sassFns')) {
        heimdall.registerMonitor('sassFns', SassFnSchema);
    }
    var _loop_1 = function (fn) {
        var realFn = functions[fn];
        functions[fn] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var stats = heimdall.statsFor("sassFns");
            var startTime = timeNS();
            if (!stats[fn]) {
                stats[fn] = { count: 0, time: 0 };
            }
            stats[fn].count++;
            if (args.length > 0 && typeof args[args.length - 1] === "function") {
                var realDone_1 = args[args.length - 1];
                args[args.length - 1] = function (r) {
                    stats[fn].time += timeSinceNS(startTime);
                    realDone_1(r);
                };
            }
            var result = realFn.call.apply(realFn, __spread([this], args));
            if (result) {
                stats[fn].time += timeSinceNS(startTime);
            }
            return result;
        };
    };
    try {
        for (var _b = __values(Object.keys(functions)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var fn = _c.value;
            _loop_1(fn);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return functions;
}
//# sourceMappingURL=ModuleFunctions.js.map